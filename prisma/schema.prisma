// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id               String           @id @default(uuid())
  firstName        String           @map("first_name")
  lastName         String           @map("last_name")
  dob              DateTime
  gender           String
  bloodType        String           @map("blood_type")
  cid              String
  createdAt        DateTime         @default(now()) @map("created_at")
  patientAllergies PatientAllergy[]
  address          Address?
  insurance        Insurance?

  @@map("patient")
}

model Address {
  id          String  @id @default(uuid())
  addressLine String  @map("address_line")
  ward        String
  district    String
  city        String
  patientId   String  @unique @map("patient_id")
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Insurance {
  code        String   @id
  expiredDate DateTime @map("expired_date")
  patientId   String   @unique @map("patient_id")
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("insurance")
}

model Allergy {
  id               String           @id @default(uuid())
  allergen         String
  symptoms         String
  category         String
  patientAllergies PatientAllergy[]

  @@map("allergy")
}

model PatientAllergy {
  patientId String  @map("patient_id")
  allergyId String  @map("allergy_id")
  severity  String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  allergy   Allergy @relation(fields: [allergyId], references: [id], onDelete: Cascade)

  @@id([patientId, allergyId])
  @@map("patient_allergy")
}

model Staff {
  id               String          @id @default(uuid())
  firstName        String          @map("first_name")
  lastName         String          @map("last_name")
  dob              DateTime
  jobType          String          @map("job_type")
  salary           Float
  hiredDate        DateTime        @default(now()) @map("hired_date")
  departmentId     String?         @map("department_id")
  department       Department?     @relation("StaffToDepartment", fields: [departmentId], references: [id])
  manageDepartment Department?     @relation("DepartmentManager")
  qualifications   Qualification[]
  shifts           ShiftStaff[]

  @@map("staff")
}

model Department {
  id        String  @id @default(uuid())
  name      String
  managerId String? @unique @map("manager_id")
  manager   Staff?  @relation("DepartmentManager", fields: [managerId], references: [id])
  staffs    Staff[] @relation("StaffToDepartment")

  @@map("department")
}

model Qualification {
  id        String   @id @default(uuid())
  name      String
  provider  String
  issueDate DateTime @map("issue_date")
  staffId   String   @map("staff_id")
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("qualification")
}

model Shift {
  id        String       @id @default(uuid())
  dayOfWeek String       @map("day_of_week")
  time      String
  staff     ShiftStaff[]

  @@map("shift")
}

model ShiftStaff {
  staffId String @map("staff_id")
  shiftId String @map("shift_id")
  staff   Staff  @relation(fields: [staffId], references: [id])
  shift   Shift  @relation(fields: [shiftId], references: [id])

  @@id([staffId, shiftId])
  @@map("shift_staff")
}
